@{
    ViewBag.Title = "Lịch sử hoạt động ";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    table tbody tr:hover {
        cursor: pointer;
    }

        table tbody tr:hover td {
            color: #3c8dbc;
        }

    .general-info, .setting {
        background-color: #ffffff;
        padding-top: 20px;
        border-radius: 5px;
    }

        .setting .form-group input {
            margin-left: 3%;
            width: 94%;
        }

    .toggle-handle {
        border-radius: 0;
        /*height: 30px;*/
    }

    .toggle-off.btn {
        padding-left: 30px;
    }

    .input-group-addon:hover {
        cursor: pointer;
        background: #367fa9;
        color: white;
    }

    .fixedHeader {
        position: fixed;
    }

    .modal-dialog {
        transform: none !important;
    }

    .modal-content {
        margin-top: 70px;
    }

    th, td {
        vertical-align: middle;
    }

    table.dataTable thead .sorting,
    table.dataTable thead .sorting_asc,
    table.dataTable thead .sorting_desc {
        background: none;
    }

    #LandingPageDatatable > tbody > tr > td {
        vertical-align: middle;
    }
</style>

@section Header
{
    <ol class="breadcrumb">
        <li><a href="@Url.Action("Index","Accounts")"><i class="left-icon fa fa-linux"></i>DashBoard</a></li>
        <li><a href="@Url.Action("Index","Customer")"><i class="left-icon fa fa-linux"></i>Quản lý thiết bị</a></li>
        <li class="active">@ViewData["Username"]</li>
    </ol>
}

<div class="row">
    <!-- Location chooser -->
    <div class="col-md-12">

        <!-- Header -->
        <div class="block-header title-format">
            <h2>Lịch sử hoạt động của '@ViewData["Username"]'</h2>
            <input hidden type="text" value="@ViewData["IMEI"]" id="txtIMEI" />
        </div>


        <!-- Daterange picker -->
        <div class="calendar-format">
            <div class="fg-line m-t-5">
                <div id="reportrange" class="btn-datetime form-control">
                    <i class="fa fa-calendar"></i>
                    <span></span> <b class="caret"></b>
                </div>
            </div>
        </div>
        <!--Social Type Picker -->
        @*<div class="menu-filter">
                <div class="btn-group">
                    <button type="button" id="btn-accountTypes" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" id="accountType-menu"></ul>
                </div>
                <input type="hidden" id="AccountTypeId" name="LocationId" value="-1" />
            </div>*@

        <!--Location type picker-->
        @*<div class="menu-filter">
                <div class="btn-group">
                    <button type="button" id="btn-locations" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" id="location-menu"></ul>
                </div>
                <input type="hidden" id="LocationId" name="LocationId" value="-1" />
            </div>*@
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body card-padding">
                <table id="historyDatatable" class="table table-striped table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>
                                <label class="">STT</label>
                            </th>
                            @*<th>
                                    <label class="">Latitude</label>
                                </th>
                                <th>
                                    <label class="">Longitude</label>
                                </th>
                                <th>
                                    <label class="">Altitude</label>
                                </th>*@
                            <th>
                                <label class="">Ngày tạo</label>
                            </th>
                            <th>
                                <label class="">Chi tiết</label>
                            </th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="DeviceModal" class="modal fade" role="dialog" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="transform: rotate(90deg);margin-top: -200px;">
                <div class="modal-header">
                    @*<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>*@
                    @*<h3>Vị trí thiết bị</h3>*@
                </div>
                <img src="~/Content/images/Maps/Floor1.png" id="mapFloor1" width="600" hidden height="960" />
                <img src="~/Content/images/Maps/Floor2.png" id="mapFloor2" width="600" hidden height="960" />
                <img src="~/Content/images/Maps/Floor3.png" id="mapFloor3" width="600" hidden height="960" />
                <img src="~/Content/images/Maps/Floor4.png" id="mapFloor4" width="600" hidden height="960" />
                <img src="~/Content/images/Maps/Floor5.png" id="mapFloor5" width="600" hidden height="960" />
                <canvas id="myCanvas" width="600" height="960"
                        style="border:1px solid #c3c3c3" ;>
                    Your browser does not support the canvas element.
                </canvas>
            </div>
        </div>
    </div>

</div>


@section Scripts {
    <script src="~/Content/js/Campaign.js"></script>
    <script>
        var corners = null;
        var posX = 0;
        var posY = 0;
        var width = 600;
        var height = 960;
        $(document).ready(function () {
            getConners(1);
            setupDaterangepicker();
            InitDatatable();

            $(document).on('onFadeOutComplete', '#loading-image', function () {
                StartOverallTour();
            });
        });

        //init dateRange picker
        function setupDaterangepicker() {
            $('#reportrange span').html(moment().add(0, 'days').format('MMM D, YYYY') + ' - ' + moment().add(0, 'days').format('MMM D, YYYY'));
            $('#reportrange').daterangepicker({
                format: 'DD/MM/YYYY',
                startDate: moment().add(0, 'days'),
                endDate: moment().add(0, 'days'),
                minDate: '01/01/2012',
                maxDate: '31/12/2100',
                dateLimit: { days: 365 },
                showDropdowns: true,
                showWeekNumbers: true,
                timePicker: false,
                timePickerIncrement: 1,
                timePicker12Hour: true,
                parentEl: '.modal-body',
                ranges: {
                    '@Wisky.ResourcesLanguage.DateTimePicker.Today': [moment.utc().startOf('day'), moment.utc().endOf('day')],
                    '@Wisky.ResourcesLanguage.DateTimePicker.Yesterday': [moment.utc().startOf('day').add(-1, 'days'), moment.utc().endOf('day').add(-1, 'days')],
                    '@Wisky.ResourcesLanguage.DateTimePicker.ThisWeek': [moment().add(0, 'week').startOf('week'), moment().add(0, 'week').endOf('week')],
                    '@Wisky.ResourcesLanguage.DateTimePicker.LastWeek': [moment().add(-1, 'week').startOf('week'), moment().add(-1, 'week').endOf('week')],
                    '@Wisky.ResourcesLanguage.DateTimePicker.ThisMonth': [moment().add(0, 'month').startOf('month'), moment().add(0, 'month').endOf('month')],
                    '@Wisky.ResourcesLanguage.DateTimePicker.LastMonth': [moment().add(-1, 'month').startOf('month'), moment().add(-1, 'month').endOf('month')]
                },
                opens: 'left',
                drops: 'down',
                buttonClasses: ['btn', 'btn-sm'],
                applyClass: 'btn-primary',
                cancelClass: 'btn-default',
                separator: ' to ',
                locale: {
                    applyLabel: '@Wisky.ResourcesLanguage.DateTimePicker.Submit',
                    cancelLabel: '@Wisky.ResourcesLanguage.DateTimePicker.Cancel',
                    fromLabel: '@Wisky.ResourcesLanguage.DateTimePicker.From',
                    toLabel: '@Wisky.ResourcesLanguage.DateTimePicker.To',
                    customRangeLabel: '@Wisky.ResourcesLanguage.DateTimePicker.Custom',
                    daysOfWeek: ['@Wisky.ResourcesLanguage.DateTimePicker.Sunday', '@Wisky.ResourcesLanguage.DateTimePicker.Monday', '@Wisky.ResourcesLanguage.DateTimePicker.Tuesday', '@Wisky.ResourcesLanguage.DateTimePicker.Wednesday', '@Wisky.ResourcesLanguage.DateTimePicker.Thursday', '@Wisky.ResourcesLanguage.DateTimePicker.Friday', '@Wisky.ResourcesLanguage.DateTimePicker.Sartuday'],
                    monthNames: ['@Wisky.ResourcesLanguage.DateTimePicker.January', '@Wisky.ResourcesLanguage.DateTimePicker.February', '@Wisky.ResourcesLanguage.DateTimePicker.March', '@Wisky.ResourcesLanguage.DateTimePicker.April', '@Wisky.ResourcesLanguage.DateTimePicker.May', '@Wisky.ResourcesLanguage.DateTimePicker.June', '@Wisky.ResourcesLanguage.DateTimePicker.July', '@Wisky.ResourcesLanguage.DateTimePicker.August', '@Wisky.ResourcesLanguage.DateTimePicker.September', '@Wisky.ResourcesLanguage.DateTimePicker.October', '@Wisky.ResourcesLanguage.DateTimePicker.November', '@Wisky.ResourcesLanguage.DateTimePicker.December'],
                    firstDay: 1
                }
            }, function (start, end, label) {
                console.log(start.toISOString(), end.toISOString(), label);

                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
            });


            $('#reportrange').on('apply.daterangepicker', function (ev, picker) {
                //startDate = picker.startDate.format('DD/MM/YYYY');
                //endDate = picker.endDate.format('DD/MM/YYYY');
                RefreshTable();
            });
        }

        function RefreshTable() {
            var oTable = $("#historyDatatable").dataTable();
            oTable._fnPageChange(0);
            oTable._fnAjaxUpdate();
        }

        function InitDatatable() {
            $("#historyDatatable").dataTable({
                "bFilter": true,
                "bRetrieve": true,
                "bServerSide": true,
                "bScrollCollapse": true,
                "sAjaxSource": "@Url.Action("PositionDatatable", "History")",
                "bProcessing": true,
                "bFilter": true,
                "fnServerParams": function (aoData) {
                    aoData.push(
                        { "name": "IMEI", "value": $("#txtIMEI").val() },
                        { "name": "startDate", "value": $('#reportrange').data('daterangepicker').startDate.toISOString() },
                        { "name": "endDate", "value": $('#reportrange').data('daterangepicker').endDate.toISOString() }
                    );
                },
                "oLanguage": {
                    "sSearch": "Tìm kiếm: ",
                    "sZeroRecords": "Không có danh mục nào",
                    "sInfo": "Hiển thị từ _START_ đến _END_ trong tổng số _TOTAL_",
                    "sEmptyTable": "Không có dữ liệu",
                    "sInfoFiltered": " ",
                    "sLengthMenu": "Hiển thị _MENU_ dòng",
                    "sProcessing": "Đang xử lý...",
                    "oPaginate": {
                        "sNext": "<i class='fa fa-chevron-right'></i>",
                        "sPrevious": "<i class='fa fa-chevron-left'></i>"
                    }
                },
                "aoColumnDefs": [
                    {
                        "aTargets": [0, 1, 2],
                        "bSortable": true,
                    },
                    {
                        "aTargets": [2],
                        "mRender": function (data, type, row) {
                            var data = row[2];
                            return "<a class='btn btn-sm btn-primary' data-toggle='tooltip' title='Chi tiết' onclick='viewPointMap(" + data + ")'><i class='fa fa-eye'></i></a>"
                        },
                        "bSortable": false

                    }
                ],
                "bAutoWidth": false,
            }).fnSetFilteringDelay(1000);
        }
    </script>
    <script>
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });
        function viewPointMap(id) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetPointMap", "History")',
                data: { id: id },
                success: function (result) {
                    if (result.success) {
                        $('#DeviceModal').modal('show');
                        var canvas = document.getElementById("myCanvas");
                        var ctx = canvas.getContext("2d");
                        var img = document.getElementById("mapFloor1");
                            if (result.Altitude == 0) {
                                img = document.getElementById("mapFloor1");
                            } else if (result.Altitude > 0 && result.Altitude <= 6.8) {
                                img = document.getElementById("mapFloor1");
                            }
                            else if (result.Altitude > 6.8 && result.Altitude <= 9.9) {
                                img = document.getElementById("mapFloor1");
                            }
                            else if (result.Altitude > 9.9 && result.Altitude <= 13.3) {
                                img = document.getElementById("mapFloor1");
                            }
                            else if (result.Altitude > 13.3 && result.Altitude <= 17.3) {
                                img = document.getElementById("mapFloor2");
                            } else if (result.Altitude > 17.3 && result.Altitude <= 20.4) {
                                img = document.getElementById("mapFloor3");
                            } else if (result.Altitude > 20.4 && result.Altitude <= 24.3) {
                                img = document.getElementById("mapFloor4");
                            } else if (result.Altitude > 24.3) {
                                img = document.getElementById("mapFloor5");
                        }
                        ctx.drawImage(img, 0, 0, 600, 960);
                        getPointMap(result.Latitude, result.Longitude);
                        ctx.fillStyle = "#0800ff";
                        if (posX != 0 && posY != 0) {
                            ctx.fillRect(posX, posY, 15, 15);
                        }
                    } else {
                        PnotifyFail("Có lỗi xảy ra!!!");
                    }
                },
                error: function (error) {
                    PnotifyFail("Có lỗi xảy ra!!!");
                }
            });

        }
        function getConners(id) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetAllCornerWithMap", "History")',
                data: { mapId: id },
                success: function (result) {
                    if (result.success) {
                        corners = result;
                    } else {
                        PnotifyFail("Có lỗi xảy ra!!!");
                    }
                },
                error: function (error) {
                    PnotifyFail("Có lỗi xảy ra!!!");
                }
            });

        }

        function getPointMap(latitude, longitude) {
            var corner = 1;
            var min = PerpendicularDistance(corners.result[0], corners.result[1], longitude, latitude);
            var perpendicular = PerpendicularDistance(corners.result[1], corners.result[2], longitude, latitude);
            if (perpendicular <= min) {
                min = perpendicular;
                corner = 2;
            }
            perpendicular = PerpendicularDistance(corners.result[2], corners.result[3], longitude, latitude);
            if (perpendicular <= min) {
                min = perpendicular;
                corner = 3;
            }
            perpendicular = PerpendicularDistance(corners.result[3], corners.result[0], longitude, latitude);
            if (perpendicular <= min) {
                min = perpendicular;
                corner = 4;
            }
            var checkX = 0;
            var checkY = 0;
            if (corner == 1) {
                //29  18
                var currentCorner1 = corners.result[1];
                var currentCorner2 = corners.result[0];
                var distance2 = HaversineInM(latitude, longitude, currentCorner1.Latitude, currentCorner1.Longitude);
                var distanceCorner = HaversineInM(currentCorner2.Latitude, currentCorner2.Longitude,
                        currentCorner1.Latitude, currentCorner1.Longitude);
                var temp = getPixelWithPer(min, distance2);
                checkY = height / distanceCorner * temp;
                currentCorner2 = corners.result[2];
                distanceCorner = HaversineInM(currentCorner1.Latitude, currentCorner1.Longitude,
                        currentCorner2.Latitude, currentCorner2.Longitude);
                checkX = (width / distanceCorner * min);
            } else if (corner == 3) {
                var currentCorner1 = corners.result[2];
                var currentCorner2 = corners.result[3];
                var distance2 = HaversineInM(latitude, longitude, currentCorner1.Latitude, currentCorner1.Longitude);
                var distanceCorner = HaversineInM(currentCorner2.Latitude, currentCorner2.Longitude,
                        currentCorner1.Latitude, currentCorner1.Longitude);
                var temp = getPixelWithPer(min, distance2);
                checkY =(height / distanceCorner * temp);
                currentCorner2 = corners.result[1];
                distanceCorner = HaversineInM(currentCorner1.Latitude, currentCorner1.Longitude,
                        currentCorner2.Latitude, currentCorner2.Longitude);
                var x = distanceCorner - (min);
                checkX = (width / distanceCorner * x);
            } else if (corner == 2) {
                var currentCorner1 = corners.result[2];
                var currentCorner2 = corners.result[1];
                var distance2 = HaversineInM(latitude, longitude, currentCorner2.Latitude, currentCorner2.Longitude);
                var distanceCorner = HaversineInM(currentCorner2.Latitude, currentCorner2.Longitude,
                        currentCorner1.Latitude, currentCorner1.Longitude);
                var temp = getPixelWithPer(min, distance2);
                checkX = (width / distanceCorner * temp);
                currentCorner1 = corners.result[0];
                distanceCorner = HaversineInM(currentCorner1.Latitude, currentCorner1.Longitude,
                        currentCorner2.Latitude, currentCorner2.Longitude);
                checkY =  (height / distanceCorner * min);
            } else if (corner == 4) {
                var currentCorner1 = corners.result[3];
                var currentCorner2 = corners.result[0];
                var distance2 = HaversineInM(latitude, longitude, currentCorner2.Latitude, currentCorner2.Longitude);
                var distanceCorner = HaversineInM(currentCorner2.Latitude, currentCorner2.Longitude,
                        currentCorner1.Latitude, currentCorner1.Longitude);
                var temp = getPixelWithPer(min, distance2);
                checkX =(width / distanceCorner * temp);
                currentCorner2 = corners.result[2];
                distanceCorner = HaversineInM(currentCorner1.Latitude, currentCorner1.Longitude,
                        currentCorner2.Latitude, currentCorner2.Longitude);
                var x = distanceCorner - min;
                checkY = (height / distanceCorner * x);
            }

            if ((checkX <= width && checkX >= 0) && (checkY <= height && checkY >= 0)) {
                posX = checkX;
                posY = checkY;
            } else {
                posX = 0;
                posY = 0;
            }
        }


        function HaversineInM(lat1, long1, lat2, long2) {
            return (1000.0 * HaversineInKMFast(lat1, long1, lat2, long2));
        }

        function HaversineInKMFast(lat1, long1, lat2, long2) {
            var dLat = (lat2 - lat1) * Math.PI / 180; // deg2rad below
            var dLon = (long2 - long1) * Math.PI / 180;
            var a =0.5 - Math.cos(dLat) / 2 +
                            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                                    (1 - Math.cos(dLon)) / 2;

            return 6371.0 * 2 * Math.asin(Math.sqrt(a));
        }

        function PerpendicularDistance(/*Corner*/ pointA, /*Corner*/ pointB, longitude, latitude) {

                var bottom = HaversineInKMFast(pointA.Latitude, pointA.Longitude, pointB.Latitude, pointB.Longitude);
                var a = HaversineInKMFast(pointA.Latitude, pointA.Longitude, latitude, longitude);
                var b = HaversineInKMFast(latitude, longitude, pointB.Latitude, pointB.Longitude);
                var p = .5 * (bottom + a + b);
                var area = Math.sqrt(p * (p - bottom) * (p - a) * (p - b));
                var height = area / bottom * 2;
                return height * 1000.0;
        }
       function getPixelWithPer(perpendicular, currentDistance) {
        var temp = Math.pow(currentDistance, 2);
        temp = temp - Math.pow(perpendicular, 2);
        temp = Math.abs(temp);
        var result = Math.sqrt(temp);

        return result;
        }
    </script>
}